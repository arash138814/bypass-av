import ast
import random
import tokenize
import io
import argparse
def generate_unique_random_data(length, used_names):
    characters = ['l', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    while True:
        first_char = random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
        remaining_chars = ''.join(random.choice(characters) for _ in range(length - 1))
        random_name = first_char + remaining_chars
        if random_name not in used_names:
            used_names.add(random_name)
            return random_name
def extract_variables(filename, level):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            tree = ast.parse(file.read(), filename=filename)
    except (FileNotFoundError, SyntaxError):
        print("Error In The File")
        exit()
    variables = set()
    class VariableVisitor(ast.NodeVisitor):
        def visit_Assign(self, node):
            if level >= 1:
                for target in node.targets:
                    if isinstance(target, ast.Name):
                        variables.add(target.id)
            self.generic_visit(node)
        def visit_FunctionDef(self, node):
            if level >= 2:
                variables.add(node.name)
            if level >= 3:
                for arg in node.args.args:
                    variables.add(arg.arg)
            self.generic_visit(node)
        def visit_ClassDef(self, node):
            if level >= 3:
                variables.add(node.name)
            self.generic_visit(node)
    visitor = VariableVisitor()
    visitor.visit(tree)
    return variables
def replace_variables_with_random(filename, output_filename, var_length, level):
    if var_length < 7:
        print("Error: Random names must be at least 7 characters long.")
        exit()
    variables = extract_variables(filename, level)
    used_names = set()
    variable_map = {var: generate_unique_random_data(var_length, used_names) for var in variables}
    with open(filename, "r", encoding="utf-8") as file:
        content = file.read()
    tokens = tokenize.generate_tokens(io.StringIO(content).readline)
    modified_tokens = []
    operators_to_fix = {"=", "+", "-", "*", "/"}  
    for toknum, tokval, start, end, line in tokens:
        if toknum == tokenize.NAME and tokval in variable_map:
            modified_tokens.append((toknum, variable_map[tokval]))
        elif tokval in operators_to_fix:
            modified_tokens.append((toknum, tokval))
            modified_tokens.append((tokenize.OP, " "))  
        else:
            modified_tokens.append((toknum, tokval))  
    updated_content = tokenize.untokenize(modified_tokens)  
    try:
        with open(output_filename, "w", encoding="utf-8") as file:
            file.write(updated_content)
    except FileNotFoundError:
        print("Error writing output file.")
def dry_run_replacement(filename, var_length, level):
    variables = extract_variables(filename, level)
    used_names = set()
    variable_map = {var: generate_unique_random_data(var_length, used_names) for var in variables}
    with open(filename, "r", encoding="utf-8") as file:
        content = file.read()
    modified_content = content
    for var, random_name in variable_map.items():
        modified_content = modified_content.replace(var, random_name)
    print("Show changes without saving them to file :")
    print(modified_content)
def process_multiple_files(input_files, output_file, var_length, level, dry_run):
    for input_file in input_files:
        if dry_run:
            dry_run_replacement(input_file, var_length, level)
        else:
            replace_variables_with_random(input_file, output_file, var_length, level)
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="جایگزینی متغیرها، توابع، کلاس‌ها و پارامترهای ورودی در یک فایل پایتون.")
    parser.add_argument("-i", "--input", required=True, nargs='+', help="فایل‌های ورودی پایتون (چندین فایل)")
    parser.add_argument("-o", "--output", required=True, help="فایل خروجی پایتون")
    parser.add_argument("-l", "--length", type=int, default=10, help="تعیین طول نام‌های تصادفی (حداقل ۷)")
    parser.add_argument("--level", type=int, choices=[1, 2, 3], default=3, help="سطح جایگزینی (1: متغیرها، 2: توابع، 3: کلاس‌ها و پارامترها)")
    parser.add_argument("--dry-run", action="store_true", help="مشاهده تغییرات بدون ذخیره فایل")
    args = parser.parse_args()
    process_multiple_files(args.input, args.output, args.length, args.level, args.dry_run)
